# 1. Даны значения величины заработной платы заемщиков банка (zp) 
# и значения их поведенческого кредитного скоринга (ks): zp = [35, 45, 190, 200, 40, 70, 54, 150, 120, 110], 
# ks = [401, 574, 874, 919, 459, 739, 653, 902, 746, 832].
# Используя математические операции, посчитать коэффициенты линейной регрессии,
# приняв за X заработную плату (то есть, zp - признак), 
# а за y - значения скорингового балла (то есть, ks - целевая переменная).
# Произвести расчет как с использованием intercept, так и без.

# 2. Посчитать коэффициент линейной регрессии при заработной плате (zp), используя градиентный спуск (без intercept).

# 3. Произвести вычисления как в пункте 2, но с вычислением intercept.
# Учесть, что изменение коэффициентов должно производиться на каждом шаге одновременно
# (то есть изменение одного коэффициента не должно влиять на изменение другого во время одной итерации).

import numpy as np

# коэффициенты линейной регрессии c принятием за X заработную плату (то есть, zp - признак)
zp = np.array([35, 45, 190, 200, 40, 70, 54, 150, 120, 110])
ks = np.array([401, 574, 874, 919, 459, 739, 653, 902, 746, 832])
n = 10
# b1 = (n * np.sum(zp * ks) - np.sum(zp) * np.sum(ks)) / (n * np.sum(zp ** 2) - np.sum(zp) ** 2)


b1 = (np.mean(zp* ks) - np.mean(zp) * np.mean(ks)) / (np.mean(zp ** 2) - np.mean(zp) ** 2)
print(b1)

b0 = np.mean(ks) - b1 * np.mean(zp)
print(b0)

y_pred = b0 + b1 * zp
print(y_pred)

mse = ((ks - y_pred) ** 2).sum() / n
print(mse)

# Производим расчет с использованием intercept и без.

x = zp.reshape((10, 1))
print(x)

y = ks.reshape((10, 1))
print(y)

X = np.hstack([np.ones((10 , 1)), x])
print(X)

B = np.dot(np.linalg.inv(np.dot(X.T,X)), X.T @ y)
print(B)

#  Расчет коэффициентов методом градиентного спуска

def mse_(B1, ks = ks, zp = zp, n = 10):
    return np.sum((B1 * zp - ks) ** 2) / n

alpha = 1e-6
B1 = 0.1
n = 8

# for i in range(10):
#     B1 -= alpha * (2 / n) * np.sum((B1 * zp - ks) * zp)
#     print('B1 = {}'.format(B1))
    
for i in range (3000):
    B1 -= alpha * (2 / n) * np.sum((B1 * zp - ks) * zp)
    if i % 500 == 0:
        print('Interanion = {i}, B1 = {B1}, mse = {mse}'.format(i = i, B1 = B1, mse = mse_(B1)))

print(mse_(5.889820))

